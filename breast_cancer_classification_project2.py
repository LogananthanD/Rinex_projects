# -*- coding: utf-8 -*-
"""Breast_cancer_classification_project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i1LGQsyS8nIhrbQ2odWP8Z5ZizIPBDJM
"""

import numpy as np
import pandas as pd

#Importing Model
from sklearn.linear_model import LogisticRegression

#Importing Dataset
import sklearn.datasets

from sklearn.metrics import accuracy_score

from sklearn.model_selection import train_test_split

#Importing the dataset
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()
breast_cancer_dataset

#Load the dataset into a dataframe
df = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)

#Printing first 5 rows
df.head()

df['label'] = breast_cancer_dataset.target

#Print the last 5 rows
df.tail()

#No.of Rows and Columns in the dataset
df.shape

#Getting the info of the data
df.info()

#Find the null values
df.isnull().sum()

#Statiscal measure of the data
df.describe()

#Checking the distribution of target(label) column
# 1 - Benign
# 0 - Malignant
df['label'].value_counts()

#Group by label columns and find the mean for all the columns
df.groupby(by = 'label').mean()

#Input Feature (All the columns except the label column) - X
#Target Column - (Label Column) - Y
X = df.drop(columns = 'label', axis = 1)
Y = df['label']

X

Y

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)
print(X.shape, X_train.shape, Y_test.shape)

model = LogisticRegression()

model.fit(X_train, Y_train)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print("Accuracy score for the training data", training_data_accuracy)

X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print("Accuracy score for the testing data", testing_data_accuracy)

#Building a predictive system
input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)
input_data_as_numpy_array = np.asarray(input_data)

input_data_reshape = input_data_as_numpy_array.reshape(1,-1)

#Prediction of one data point
prediction = model.predict(input_data_reshape)
if(prediction == 0):
  print("Breast Cancer is Malignant")
else:
  print("Breast Cancer is Benign")